#!/usr/bin/env python
PACKAGE = "ueye_cam"

from dynamic_reconfigure.parameter_generator_catkin import *

RECONFIGURE_RUNNING = 0
RECONFIGURE_STOP = 1
RECONFIGURE_CLOSE = 3

gen = ParameterGenerator()

gen.add("image_width", int_t, RECONFIGURE_STOP,
  "Width of camera's area of interest (prior to subsampling, binning, or sensor scaling)", 640, 16, 4912)
gen.add("image_height", int_t, RECONFIGURE_STOP,
  "Height of camera's area of interest (prior to subsampling, binning, or sensor scaling)", 480, 4, 3684) 
gen.add("image_left", int_t, RECONFIGURE_STOP,
  "Left index for camera's area of interest (-1: center)", -1, -1, 2560-16)
gen.add("image_top", int_t, RECONFIGURE_STOP,
  "Top index for camera's area of interest (-1: center)", -1, -1, 1920-4)

color_mode_enum = gen.enum([
  gen.const("MONO8", str_t, "mono8", "8-bit Monochrome"),
  gen.const("MONO10", str_t, "mono10", "10-bit Monochrome"),
  gen.const("MONO12", str_t, "mono12", "12-bit Monochrome"),
  gen.const("MONO16", str_t, "mono16", "16-bit Monochrome"),
  gen.const("RGB8", str_t, "rgb8", "24-bit Red/Green/Blue"),
  gen.const("RGB10", str_t, "rgb10", "32-bit packed Red/Green/Blue"),
  gen.const("RGB10u", str_t, "rgb10u", "48-bit unpacked Red/Green/Blue"),
  gen.const("RGB12u", str_t, "rgb12u", "48-bit unpacked Red/Green/Blue"),
  gen.const("BGR8", str_t, "bgr8", "24-bit Blue/Green/Red"),
  gen.const("BGR10", str_t, "bgr10", "32-bit packed Blue/Green/Red"),
  gen.const("BGR10u", str_t, "bgr10u", "48-bit unpacked Blue/Green/Red"),
  gen.const("BGR12u", str_t, "bgr12u", "48-bit unpacked Blue/Green/Red"),
  gen.const("BAYER_RGGB8", str_t, "bayer_rggb8", "8-bit Raw Bayer (RGGB)")],
  "Color mode values")
gen.add("color_mode", str_t, RECONFIGURE_STOP,
  "Output image color mode", "mono8", edit_method=color_mode_enum)

subsampling_enum = gen.enum([
  gen.const("SUB_1X", int_t, 1, "1X Subsampling"),
  gen.const("SUB_2X", int_t, 2, "2X Subsampling"),
  gen.const("SUB_4X", int_t, 4, "4X Subsampling"),
  gen.const("SUB_8X", int_t, 8, "8X Subsampling"),
  gen.const("SUB_16X", int_t, 16, "16X Subsampling")],
  "Subsampling Values")
gen.add("subsampling", int_t, RECONFIGURE_STOP,
  "Output image subsampling ratio", 1, edit_method=subsampling_enum)

binning_enum = gen.enum([
  gen.const("BIN_1X", int_t, 1, "1X Binning"),
  gen.const("BIN_2X", int_t, 2, "2X Binning"),
  gen.const("BIN_4X", int_t, 4, "4X Binning"),
  gen.const("BIN_8X", int_t, 8, "8X Binning"),
  gen.const("BIN_16X", int_t, 16, "16X Binning")],
  "Binning Values")
gen.add("binning", int_t, RECONFIGURE_STOP,
  "Output image binning ratio", 1, edit_method=binning_enum)

sensor_scaling_enum = gen.enum([
  gen.const("SS_1X", double_t, 1.0, "1X Internal Image Scaling"),
  gen.const("SS_2X", double_t, 2.0, "2X Internal Image Scaling"),
  gen.const("SS_4X", double_t, 4.0, "4X Internal Image Scaling"),
  gen.const("SS_8X", double_t, 8.0, "8X Internal Image Scaling"),
  gen.const("SS_16X", double_t, 16.0, "16X Internal Image Scaling")],
  "Internal Image Scaling Values")
gen.add("sensor_scaling", double_t, RECONFIGURE_STOP,
  "Output image scaling ratio (Internal Image Scaling)", 1, edit_method=sensor_scaling_enum)

gen.add("auto_gain", bool_t, RECONFIGURE_RUNNING,
  "Auto gain (overruled by auto framerate)", False)
gen.add("master_gain", int_t, RECONFIGURE_RUNNING,
  "Master gain percentage", 0, 0, 100)
gen.add("red_gain", int_t, RECONFIGURE_RUNNING,
  "Gain percentage for red channel", 0, 0, 100)
gen.add("green_gain", int_t, RECONFIGURE_RUNNING,
  "Gain percentage for green channel", 0, 0, 100)
gen.add("blue_gain", int_t, RECONFIGURE_RUNNING,
  "Gain percentage for blue channel", 0, 0, 100)
gen.add("gain_boost", bool_t, RECONFIGURE_RUNNING,
  "Analog gain boost", False)
 
gen.add("auto_exposure", bool_t, RECONFIGURE_RUNNING,
  "Auto exposure (a.k.a. auto shutter)", False)
gen.add("exposure", double_t, RECONFIGURE_RUNNING,
  "Exposure value (ms)", 33.0, 0.0, 300.0)
 
gen.add("auto_white_balance", bool_t, RECONFIGURE_RUNNING,
  "Auto white balance", False)
gen.add("white_balance_red_offset", int_t, RECONFIGURE_RUNNING,
  "Red level offset for white balance", 0, -50, 50)
gen.add("white_balance_blue_offset", int_t, RECONFIGURE_RUNNING,
  "Blue level offset for white balance", 0, -50, 50)

gen.add("flash_delay", int_t, RECONFIGURE_RUNNING,
  "Flash output delay (us) [not applicable in external trigger mode]", 0, -1000000, 1000000)
gen.add("flash_duration", int_t, RECONFIGURE_RUNNING,
  "Flash output duration (us) (0: set to exposure duration) [not applicable in external trigger mode]", 1000, 0, 1000000)

gen.add("ext_trigger_mode", bool_t, RECONFIGURE_STOP,
  "Toggle between external trigger mode and free-run mode", False)
gpio_enum = gen.enum([
  gen.const("INPUT", int_t, 0, "Input"),
  gen.const("TRIGGER", int_t, 1, "Trigger")],
  "Mode of a GPIO pin")
gen.add("gpio1", int_t, RECONFIGURE_STOP,
  "Mode for GPIO1 (pin 5)", 0, edit_method=gpio_enum)
gen.add("gpio2", int_t, RECONFIGURE_STOP,
  "Mode for GPIO2 (pin 6)", 0, edit_method=gpio_enum)

gen.add("auto_frame_rate", bool_t, RECONFIGURE_RUNNING,
  "Auto frame rate (requires auto exposure, supercedes auto gain) [not applicable in external trigger mode]", False) 
gen.add("frame_rate", double_t, RECONFIGURE_RUNNING,
  "Frame process rate (Hz) [not applicable in external trigger mode]", 10.0, 0.01, 200.0)
gen.add("output_rate", double_t, RECONFIGURE_RUNNING,
  "Frame publish rate (Hz) (0: publish all processed frames) [not applicable in external trigger mode]", 0, 0, 200.0)
gen.add("pixel_clock", int_t, RECONFIGURE_RUNNING,
  "Pixel clock (MHz)", 25, 1, 500)


gen.add("flip_upd", bool_t, RECONFIGURE_RUNNING,
  "Mirror Upside Down", False)
gen.add("flip_lr", bool_t, RECONFIGURE_RUNNING,
  "Mirror Left Right", False)

exit(gen.generate(PACKAGE, "ueye_cam", "UEyeCam"))
